<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    <string name="home">Home</string>

    <string name="element_text">Element</string>
    <string name="item_element_text">This is element #</string>
    <string name="middle">This is the middle!</string>

    <string name="type_a_phone_number">Please enter a number…</string><string name="button_dial_number">Call Number</string><string name="button_pick_contact">Pick Number</string><string name="contacts_activity_placeholder">This a placeholder Activity for a contacts screen.
    This activity is never opened and does not contain any real contact data for
    keeping this sample simple and focused.
</string><string name="warning_call_phone_permission">This app requires \'call phone\' permission to run</string>

    <string name="waiting_msg">Waiting for message…</string>
    <string name="row_label">Clicked on row</string>

    <string name="one_hundred">100</string>
    <string name="plus">+</string>
    <string name="eight">8</string>
    <string name="zero">0</string>
    <string name="retry">Retry</string>
    <string name="delay">Delay</string>
    <string name="enter_a_valid_email_below">Enter a valid email below:</string>
    <string name="password_than_8_chrs"><![CDATA[password (> than 8 chrs):]]></string>
    <string name="number_between_1_amp_100"><![CDATA[number (between 1 & 100):]]></string>
    <string name="submit">Submit</string>
    <string name="start_simple_polling">Start simple polling</string>
    <string name="start_increasingly_delayed_polling">Start increasingly delayed polling</string>
    <string name="info_about_the_demo_will_show_up_here">Info about the demo will show up here</string>
    <string name="concat">concat</string>
    <string name="concat_eager">concat (eager)</string>
    <string name="merge">merge</string>
    <string name="merge_n_slower_disk">merge (slower disk)</string>
    <string name="merge_n_optimized">merge (optimized)</string>
    <string name="merge_n_optimized_slow_disk">merge (optimized) slow disk</string>
    <string name="start_disk_network_call"><![CDATA[Start disk > network call]]></string>
    <string name="log_contributors_of">Log contributors of:</string>
    <string name="log_with_full_user_info">Log with full User Info:</string>
    <string name="log_user_info">Log User Info:</string>
    <string name="kaushikgopal">kaushikgopal</string>
    <string name="start_operation">Start operation</string>
    <string name="one">1</string>
    <string name="tap">tap!</string>
    <string name="button_1">Button 1</string>
    <string name="button_2">Button 2</string>
    <string name="start">Start</string>
    <string name="i_amz_btn">I AMZ BTN</string>

    <string name="custom_match_instructions">See CustomMatch.java for valid options or type something ending
        in \"coffee\".
    </string>
    <string name="custom_match_hint">How do you like your coffee?</string>
    <string name="validate">Validate</string>
    <string name="good_choice">Good choice!</string>
    <string name="bad_choice">Bad choice!</string>

    <string name="hello_espresso">Hello Espresso!</string>
    <string name="change_text">Change text</string>
    <string name="type_something">type something…</string>
    <string name="open_activity_and_change_text">Open activity and change text</string>

    <string name="clear_cache_menu">Clear Caches</string>
    <string name="clear_cache_complete_toast">Caches have been cleared</string>
    <string name="imageview_description">Image Thumbnail</string>
    <string name="no_network_connection_toast">No network connection found</string>

    <string name="todomvp">TodoMvp</string>
    <string name="add_task">New TO-DO</string>
    <string name="edit_task">Edit TO-DO</string>
    <string name="task_marked_complete">Task marked complete</string>
    <string name="task_marked_active">Task marked active</string>
    <string name="loading_tasks_error">Error while loading tasks</string>
    <string name="completed_tasks_cleared">Completed tasks cleared</string>
    <string name="menu_filter">Filter</string>
    <string name="menu_clear">Clear completed</string>
    <string name="menu_delete_task">Delete task</string>
    <string name="navigation_view_header_title">TO-DOs</string>
    <string name="title_hint">Title</string>
    <string name="description_hint">Enter your TO-DO here.</string>
    <string name="empty_task_message">TO DOs cannot be empty</string>
    <string name="successfully_saved_task_message">TO-DO saved</string>
    <string name="list_title">TO-DO List</string>
    <string name="statistics_title">Statistics</string>
    <string name="statistics_no_tasks">You have no tasks.</string>
    <string name="statistics_active_tasks">Active tasks:</string>
    <string name="statistics_completed_tasks">Completed tasks:</string>
    <string name="statistics_error">Error loading statistics.</string>
    <string name="no_data">No data</string>
    <string name="loading">LOADING</string>
    <string-array name="list_tasks_array">
        <item>@string/nav_all</item>
        <item>@string/nav_active</item>
        <item>@string/nav_completed</item>
    </string-array>
    <string name="nav_all">All</string>
    <string name="nav_active">Active</string>
    <string name="nav_completed">Completed</string>
    <string name="label_all">All TO-DOs</string>
    <string name="label_active">Active TO-DOs</string>
    <string name="label_completed">Completed TO-DOs</string>
    <string name="no_tasks_all">You have no TO-DOs!</string>
    <string name="no_tasks_active">You have no active TO-DOs!</string>
    <string name="no_tasks_completed">You have no completed TO-DOs!</string>
    <string name="no_tasks_add">Add a TO-DO item +</string>
    <string name="refresh">Refresh</string>


    <string name="request_permission">This sample needs camera permission.</string>
    <string name="camera_error">This device does not support Camera2 API.</string>

    <string name="random_music_player">RandomMusicPlayer</string>
    <string name="picasso">Picasso</string>

    <!-- Screen title before and during recording -->
    <string name="record_your_message">Record your message</string>
    <!-- Screen title after recording -->
    <string name="message_recorded">Message recorded</string>
    <!-- Screen title while playing back a recording -->
    <string name="review_message">Review message</string>
    <!-- Label shown during recording -->
    <string name="recording">Recording</string>
    <!-- Label shown when the recording is stopped for a reason other than the user stopping it (e.g. the sd card was removed) -->
    <string name="recording_stopped">Recording stopped</string>
    <!-- label shown when there is not enough space to record something -->
    <string name="storage_is_full">Storage is full</string>
    <!-- label shown when the recording has reached maximum allowed file size -->
    <string name="max_length_reached">Maximum length reached</string>
    <!-- label shown when there is no sd card available to record to [CHAR LIMIT=30] -->
    <string name="insert_sd_card">Mount USB storage</string>
    <!-- label shown when there is more than 1 minute but less than 9 minutes of space left to record -->
    <string name="min_available">
        <xliff:g id="minutes">%d</xliff:g>
        min available
    </string>
    <!-- label shown when there is less than 1 minute of space left to record -->
    <string name="sec_available"><xliff:g id="seconds">%d</xliff:g>s available
    </string>
    <!-- button to accept the current recording and return it to the caller -->
    <string name="accept">Done</string>
    <!-- button to discard the current recording and return to the caller -->
    <string name="discard">Discard</string>
    <!-- acknowlegement button in a number of dialogs -->
    <string name="button_ok">OK</string>
    <!-- Do not translate. Format of the timer that shows how much has been recorded so far -->
    <string name="timer_format" translatable="false">
        <xliff:g id="format">%02d:%02d</xliff:g>
    </string>
    <!-- the name under which recordings will be visible in the media database is formatted like this -->
    <string name="audio_db_title_format">
        <xliff:g id="format">yyyy-MM-dd HH:mm:ss</xliff:g>
    </string>
    <!-- all recordings will show up in the media database with this 'artist' name -->
    <string name="audio_db_artist_name">Your recordings</string>
    <!-- all recordings will show up in the media database with this 'album' name -->
    <string name="audio_db_album_name">Audio recordings</string>
    <!-- all recordings will show up in the media database in a playlist with this name -->
    <string name="audio_db_playlist_name">My recordings</string>
    <!-- shown as the message in a dialog when an error occured because of an error accessing the sd card [CHAR LIMIT=NONE] -->
    <string name="error_sdcard_access">Can\'t access USB storage.</string>
    <!-- shown as the message in a dialog when the app encountered an unspecified internal error -->
    <string name="error_app_internal">Internal application error.</string>
    <!-- shown as the message in a dialog when the recording could not be added to the media database -->
    <string name="error_mediadb_new_record">Couldn\'t save recorded audio.</string>
    <string name="start_long_operation">Start long operation</string>

    <string name="favorite">Favorite</string>
    <string name="error_no_metadata">Unable to retrieve metadata.</string>
    <string name="browse_genres">Genres</string>
    <string name="browse_genre_subtitle">Songs by genre</string>
    <string name="browse_musics_by_genre_subtitle">%1$s songs</string>
    <string name="random_queue_title">Random music</string>
    <string name="error_no_connection">Cannot connect to server. Please, check your Internet connectivity.</string>
    <string name="error_loading_media">Error Loading Media</string>
    <string name="casting_to_device">Casting to %1$s</string>
    <string name="currently_playing_song">Song currently playing</string>
    <string name="currently_playing_artist">Artist of currently playing song</string>
    <string name="currently_playing_extra_info">Extra info for currently playing song</string>
    <string name="play_item">Play item</string>
    <string name="play_pause">play or pause</string>
    <string name="skip_next">skip to next</string>
    <string name="skip_prev">skip to previous</string>
    <string name="touch_to_cast">Touch to connect to a Google Cast device</string>
    <!-- Use the default receiver. To customize a styled media receiver, you can use
         the css and images under <project-root>/docs/cast_styled_receiver -->
    <string name="cast_application_id">CC1AD845</string>
    <string name="home_title">Home</string>
    <string name="related_content_header">You may also like</string>
    <string name="action_listen">Listen</string>
    <string name="open_content_drawer">Open the main menu</string>
    <string name="close_content_drawer">Close the main menu</string>
    <string name="placeholder_message">This is a placeholder for your application code.</string>
    <string name="drawer_allmusic_title">All Music</string>
    <string name="drawer_playlists_title">Playlists</string>
    <string name="now_playing">Now Playing</string>
    <string name="background_image_str">Background image for album art</string>
    <string name="search_queue_title">Search results</string>
    <string name="no_search_results">No search results.</string>
    <string name="media_route_menu_title">Play on…</string>
    <string name="nav_header_username">Username</string>

    <!-- Notificaiton Channel -->
    <string name="notification_channel">UAMP_Channel_ID</string>
    <string name="notification_channel_description">Channel ID for UAMP</string>


    <string name="msg_demo_pagination">This is a demo of how you can do a list pagination with Rx. We page 10 items at a time and there are 55 items altogether</string>
    <string name="msg_demo_volley">This is a Volley request demo</string>
    <string name="msg_demo_concurrency_schedulers">This is a demo of how long running operations can be offloaded to a background thread. After the operation is done, we resume back on the main thread. All using RxJava! \n\n To really see this shine. Hit the button multiple times and see how the button click which is a ui operation is never blocked because the long operation only runs in the background</string>
    <string name="msg_demo_buffer">This is a demo of how events can be accumulated using the "buffer" operation. Tap the button below repetitively and you will notice in the logs that button taps are collected over a span of 2s and printed below.</string>
    <string name="msg_demo_debounce">As you type in the input box, it will not shoot out log messages at every single input character change, but rather only pick the last one.</string>
    <string name="msg_demo_timeout">This is a demo of terminating events, that take too long to process. Events in this demo should timeout in 3 seconds. Button 1 is an event that takes 2s to process, and Button 2 is a n event that takes 5s to process. Hit Button 2, and see in the logs that it\'s been cancelled, while this is not the case for Button 1.</string>
    <string name="msg_demo_retrofit">Retrofit from Square is a super easy networking helper library. It works really well with RxJava and these are examples taken from Jake Wharton\'s talk at Netflix (see README). Really the only interesting bits here are in the code and logs.</string>
    <string name="msg_demo_retrofit_async_task_death">This shows how you can replace an AsyncTask with RxJava. The interesting parts are in the code.</string>
    <string name="msg_demo_doublebinding">Watch how the result gloriously auto-updates <ba></ba>sed on your changing inputs. Using a technique like this, you could achieve the two-way binding in Angular Js, or more efficiently use a pattern like the Presentation View Model.</string>
    <string name="msg_demo_polling">Demo polling or making a call repeatedly with RxJava.\n\nSimple polling: Notice in the logs how a (simulated) network call is repeatedly made in the background.</string>
    <string name="msg_demo_exponential_backoff">These two examples demonstrate retrying and executing with a delay using an exponential backoff strategy.</string>
    <string name="msg_demo_rxbus_1">Tap on the below button and RxBus will listen to the events</string>
    <string name="msg_demo_form_comb_latest">Monitor the state of multiple observables with the combineLatest operator. Only after all the 3 inputs contain valid entries will the submit button light up</string>
    <string name="msg_demo_timing">BTN 1: run single task once (after 2s complete)\nBTN 2: run task every 1s (start delay of 1s) toggle \nBTN 3: run task every 1s (start immediately) toggle \nBTN 4: run task 5 times every 3s (then complete) \nBTN 5: run task A, pause for sometime, then proceed with Task B</string>
    <string name="msg_demo_rotation_persist">This is an example of starting an Observable and using the result across rotations. There are many ways to do this, we use ViewModels from architecture components</string>
    <string name="msg_demo_network_detector">This is a demo of how to use Subjects to detect Network connectivity\nToggle your Wifi/Network on or off and notice the logs</string>
    <string name="msg_demo_using">This is a demo of the somewhat unknown operator "using".\n\nYou typically use it for managing setup/teardown of resources. Classic cases are DB connections (like Realm), sockets, locks etc.\n\nTap the button and look at the logcat. Particularly notice how the Realm instance is self-contained. That is, it is auto-disposed right after use.</string>
    <string name="msg_demo_multicast_publishRefCount">RefCount starts the upstream right away and gets disposed off, when all subscribers stop. Hit S1, Hit S2, Hit S1, Hit S2. Hit S1/S2 now and notice the stream starts all over.</string>
    <string name="msg_demo_multicast_publishAutoConnect">AutoConnect(2) waits for a min. subscriber count, before starting the upstream. Hit S1 (notice events don\'t start), Hit S2 (notice events now start), Hit S1 (notice that unsubscribing doesn\'t affect upstream), Hit S2, wait for sometime and hit S1 again (notice source stream doesn\'t restart)</string>
    <string name="msg_demo_multicast_replayAutoConnect">Replay caches the last item. Hit S1, Hit S2, event starts, Hit S2, wait a bit, Hit S2 again (notice it starts with the last item that S1 saw - courtesy Replay). Hit S2, Hit S1, wait a bit. Hit S1 again (notice event upstream continues and doesn\'t restart)</string>
    <string name="msg_demo_multicast_replayRefCount">Replay caches the last item. Hit S1, wait a bit, then hit S2 (notice S2 starts immediately with last item that S1 saw), Hit S2, Hit S1. Hit S1/S2 again (notice the stream restarts all over. Interestingly cached last item also removed when both subscribers released)</string>
    <string name="msg_demo_multicast_replayingShare">Courtesy: new #AndroidDev on the block - JakeWharton. exactly like replay(1).refCount(), but caches the last item even when upstream has been disposed off/released. Hit S1, Hit S2, Hit S1, Hit S2 (notice observable is disposed). Hit S1/S2 again (notice we start with last item emitted)</string>
    <string name="enter_some_search_text">Enter some search text</string>
    <string name="more">More</string>
    <string name="hide">Hide</string>
    <string name="sample_gallery">Gallery</string>
    <string name="select_picture">Select picture</string>

    <string name="no_comments">No comments</string>
    <string name="logged_in_as">Logged in as</string>
    <string name="comment">Comment</string>
    <string name="hint_reply">Reply</string>

    <!-- main screen -->
    <string name="search">Search</string>
    <string name="filter">Filter</string>
    <string name="about">About</string>
    <string name="designer_news_login">Log in to Designer News</string>
    <string name="designer_news_log_out">Log out of Designer News</string>
    <string name="designer_news_logged_out">Logged out of Designer News</string>
    <string name="add">Add</string>
    <string name="edit">Edit</string>
    <string name="no_filters_selected">No filters selected, press the filter button above (<annotation src="@drawable/ic_filter_small">&#2228;</annotation>)\n<i><annotation foregroundColor="@color/text_secondary_light">or swipe from the&#160;right</annotation></i></string>

    <!-- dribbble shot screen -->
    <!-- using strings for the number of views/likes as we run them through NumberFormat -->
    <plurals name="likes">
        <item quantity="zero">no likes</item>
        <item quantity="one">%s like</item>
        <item quantity="other">%s likes</item>
    </plurals>
    <plurals name="views">
        <item quantity="zero">no views</item>
        <item quantity="one">%s view</item>
        <item quantity="other">%s views</item>
    </plurals>
    <string name="share">share</string>
    <string name="prospects_cant_post">Sorry but prospects cannot comment :(</string>
    <string name="bad_dribbble_shot_url">Can\'t open that link :(</string>

    <!--searchable label-->
    <string name="search_hint">Search Dribbble &amp; Designer News</string>

    <array name="com_google_android_gms_fonts_certs">
        <item>@array/com_google_android_gms_fonts_certs_dev</item>
        <item>@array/com_google_android_gms_fonts_certs_prod</item>
    </array>
    <string-array name="com_google_android_gms_fonts_certs_dev">
        <item>
            MIIEqDCCA5CgAwIBAgIJANWFuGx90071MA0GCSqGSIb3DQEBBAUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbTAeFw0wODA0MTUyMzM2NTZaFw0zNTA5MDEyMzM2NTZaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbTCCASAwDQYJKoZIhvcNAQEBBQADggENADCCAQgCggEBANbOLggKv+IxTdGNs8/TGFy0PTP6DHThvbbR24kT9ixcOd9W+EaBPWW+wPPKQmsHxajtWjmQwWfna8mZuSeJS48LIgAZlKkpFeVyxW0qMBujb8X8ETrWy550NaFtI6t9+u7hZeTfHwqNvacKhp1RbE6dBRGWynwMVX8XW8N1+UjFaq6GCJukT4qmpN2afb8sCjUigq0GuMwYXrFVee74bQgLHWGJwPmvmLHC69EH6kWr22ijx4OKXlSIx2xT1AsSHee70w5iDBiK4aph27yH3TxkXy9V89TDdexAcKk/cVHYNnDBapcavl7y0RiQ4biu8ymM8Ga/nmzhRKya6G0cGw8CAQOjgfwwgfkwHQYDVR0OBBYEFI0cxb6VTEM8YYY6FbBMvAPyT+CyMIHJBgNVHSMEgcEwgb6AFI0cxb6VTEM8YYY6FbBMvAPyT+CyoYGapIGXMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbYIJANWFuGx90071MAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEEBQADggEBABnTDPEF+3iSP0wNfdIjIz1AlnrPzgAIHVvXxunW7SBrDhEglQZBbKJEk5kT0mtKoOD1JMrSu1xuTKEBahWRbqHsXclaXjoBADb0kkjVEJu/Lh5hgYZnOjvlba8Ld7HCKePCVePoTJBdI4fvugnL8TsgK05aIskyY0hKI9L8KfqfGTl1lzOv2KoWD0KWwtAWPoGChZxmQ+nBli+gwYMzM1vAkP+aayLe0a1EQimlOalO762r0GXO0ks+UeXde2Z4e+8S/pf7pITEI/tP+MxJTALw9QUWEv9lKTk+jkbqxbsh8nfBUapfKqYn0eidpwq2AzVp3juYl7//fKnaPhJD9gs=
        </item>
    </string-array>
    <string-array name="com_google_android_gms_fonts_certs_prod">
        <item>
            MIIEQzCCAyugAwIBAgIJAMLgh0ZkSjCNMA0GCSqGSIb3DQEBBAUAMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDAeFw0wODA4MjEyMzEzMzRaFw0zNjAxMDcyMzEzMzRaMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDCCASAwDQYJKoZIhvcNAQEBBQADggENADCCAQgCggEBAKtWLgDYO6IIrgqWbxJOKdoR8qtW0I9Y4sypEwPpt1TTcvZApxsdyxMJZ2JORland2qSGT2y5b+3JKkedxiLDmpHpDsz2WCbdxgxRczfey5YZnTJ4VZbH0xqWVW/8lGmPav5xVwnIiJS6HXk+BVKZF+JcWjAsb/GEuq/eFdpuzSqeYTcfi6idkyugwfYwXFU1+5fZKUaRKYCwkkFQVfcAs1fXA5V+++FGfvjJ/CxURaSxaBvGdGDhfXE28LWuT9ozCl5xw4Yq5OGazvV24mZVSoOO0yZ31j7kYvtwYK6NeADwbSxDdJEqO4k//0zOHKrUiGYXtqw/A0LFFtqoZKFjnkCAQOjgdkwgdYwHQYDVR0OBBYEFMd9jMIhF1Ylmn/Tgt9r45jk14alMIGmBgNVHSMEgZ4wgZuAFMd9jMIhF1Ylmn/Tgt9r45jk14aloXikdjB0MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIEluYy4xEDAOBgNVBAsTB0FuZHJvaWQxEDAOBgNVBAMTB0FuZHJvaWSCCQDC4IdGZEowjTAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBAUAA4IBAQBt0lLO74UwLDYKqs6Tm8/yzKkEu116FmH4rkaymUIE0P9KaMftGlMexFlaYjzmB2OxZyl6euNXEsQH8gjwyxCUKRJNexBiGcCEyj6z+a1fuHHvkiaai+KL8W1EyNmgjmyy8AW7P+LLlkR+ho5zEHatRbM/YAnqGcFh5iZBqpknHf1SKMXFh4dd239FJ1jWYfbMDMy3NS5CTMQ2XFI1MvcyUTdZPErjQfTbQe3aDQsQcafEQPD+nqActifKZ0Np0IS9L9kR/wbNvyz6ENwPiTrjV2KRkEjH78ZMcUQXg0L3BYHJ3lc69Vs5Ddf9uUGGMYldX3WfMBEmh/9iFBDAaTCK
        </item>
    </string-array>

    <string name="connection_line_mask_hidden">M26,159 L26,159 L32,159 L32,159 Z</string>

    <string name="phone_button">M24,206.5 C24,206.5 27.6392462,206.449997 28,206.449997 C28.3607538,206.449997 32,206.5 32,206.5</string>

    <string name="stop_casting">Stop Casting</string>
    <string name="label_pause">Pause</string>
    <string name="label_play">Play</string>
    <string name="label_previous">Previous</string>
    <string name="label_next">Next</string>
    <string name="github_oauth_token"><![CDATA[<!-- InsertYouroAuthTokenHere -->]]></string>
    <string name="square">square</string>
    <string name="owner">owner</string>
    <string name="retrofit">retrofit</string>
    <string name="reponame">reponame</string>

    <string name="mission_statement">Facebook’s mission is to give people the power to build community and bring the world closer together.</string>

    <string name="batching_queue_title">Background sensor batching</string>
    <string name="batching_queue_description">Batching allows the sensor to report sensor events at
        a specified frequency.\n\nThe system delays calls to the SensorEventListener and deliver
        them in intervals, based on the maximum report latency specified when the listener is
        registered. Note that this only means that the call to onSensorChanged() is delayed, the
        total number of calls is identical as if no batching was used. Sensors only deliver events
        while the CPU is awake. If the CPU is asleep and a batched sensor event listener is still
        registered, the sensor will continue to collect events until it runs out of memory and
        overwrites old values. This use case is not covered by this sample. (The sensor event queue
        should be flushed using a scheduled background thread.) \n\nIn this sample app data is only
        collected while the app is running and the CPU is awake. In this case the sensor will
        deliver events before the queue fills up.
    </string>

    <string name="explanation_description">The age of a sensor event describes the delay between
        when it was recorded by the sensor until it was delivered to the SensorEventListener.
    </string>

    <string name="register_detector_title">Register step detector sensor</string>
    <string name="register_detector_description">Register a listener for the STEP DETECTOR
        sensor.\n\nThis sensor delivers an event when the user takes a step. One event is received
        per step.
    </string>

    <string name="register_counter_title">Register step counter sensor</string>
    <string name="register_counter_description">Register a listener for the STEP COUNTER
        sensor.\n\nThis sensor triggers events when a step is detected, but applies algorithms to
        filter out false positives. Events from this sensor have higher latency than the step
        detector and contain the total number of steps taken since the sensor was first registered.
    </string>

    <string name="register_0">No batching (delay=0)</string>
    <string name="register_5">5s batching (delay=5000ms)</string>
    <string name="register_10">10s batching (delay=10000ms)</string>

    <string name="counting_title">Total Steps: %1$d</string>
    <string name="sensor_counter">Step Counter</string>
    <string name="sensor_detector">Step Detector</string>
    <string name="counting_description">Sensor: %1$s\nMax sensor event delay: %2$,d \u00B5s\nAge of
        events in s:\n%3$s
    </string>

    <string name="error_title">Error</string>
    <string name="error_nosensor">This sample requires at least Android KitKat (4.4) and a device
        with the step sensor.\n\nThis device does not appear to meet these requirements, as an
        alternative you may want to consider using the gyro sensor and implement your own step
        recognition as a fallback.
    </string>
    <string name="warning_nobatching">The listener has been registered, but batch mode could not be
        enabled.\n\nIt is likely that it is not supported by this device.\n\nSensor events will be
        delivered in continuous mode.
    </string>

    <string name="action_notagain">Do not show again</string>

    <string name="step_intro_title">Introduction</string>

    <string name="step_intro_message"><p>This sample demonstrates the use of the two step sensors (step detector and counter) and
            sensor batching.</p>
            <p>It shows how to register a SensorEventListener with and without
            batching and shows how these events are received.</p>
            <p>The Step Detector sensor fires an
            event when a step is detected, while the step counter returns the total number of
            steps since a listener was first registered for this sensor.
            Both sensors only count steps while a listener is registered. This sample only covers the
            basic case, where a listener is only registered while the app is running. Likewise,
            batched sensors can be used in the background (when the CPU is suspended), which
            requires manually flushing the sensor event queue before it overflows, which is not
            covered in this sample.</p></string>
    <string name="idling_resource">Idling Resource</string>
    <string name="button_open_camera">Take photo</string>
</resources>
