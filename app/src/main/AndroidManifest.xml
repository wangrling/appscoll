<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          package="com.android.home">

    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    <uses-permission android:name="android.permission.RECORD_AUDIO"/>
    <uses-permission android:name="android.permission.WAKE_LOCK"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
    <uses-permission android:name="android.permission.CAMERA"/>
    <uses-permission android:name="android.permission.WAKE_LOCK"/>
    <uses-permission android:name="android.permission.CALL_PHONE" />

    <uses-permission android:name="android.permission.VIBRATE" />
    <uses-permission android:name="android.permission.READ_CONTACTS" />

    <!-- Required to register a SyncStatusObserver to display a "syncing..." progress indicator. -->
    <uses-permission android:name="android.permission.READ_SYNC_STATS"/>
    <!-- Required to enable our SyncAdapter after it's created. -->
    <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS"/>
    <!-- Required because we're manually creating a new account. -->
    <uses-permission android:name="android.permission.AUTHENTICATE_ACCOUNTS"/>

    <uses-feature android:name="android.hardware.camera"/>
    <uses-feature android:name="android.hardware.camera.autofocus"/>

    <application
            android:icon="@mipmap/home"
            android:label="@string/home"
            android:theme="@style/Base.AppTheme">


        <receiver android:name=".widgets.stackwidget.StackWidgetProvider">
            <intent-filter>
                <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
            </intent-filter>
            <meta-data android:name="android.appwidget.provider"
                       android:resource="@xml/stackwidgetinfo" />
        </receiver>
        <service android:name=".widgets.stackwidget.StackWidgetService"
            android:permission="android.permission.BIND_REMOTEVIEWS"
                 android:exported="false"/>


        <activity android:name=".autofill.AutoFillActivity" />
        
        
        <activity android:name=".syncadapter.BasicSyncActivity" />
        <!-- This service implements our SyncAdapter. It needs to be exported, so that the system
        sync framework can access it. -->
        <service android:name=".syncadapter.SyncService"
                 android:exported="true">
            <!-- This intent filter is required. It allows the system to launch our sync service
            as needed. -->
            <intent-filter>
                <action android:name="android.content.SyncAdapter" />
            </intent-filter>
            <!-- This points to a required XML file which describes our SyncAdapter. -->
            <meta-data android:name="android.content.SyncAdapter"
                       android:resource="@xml/syncadapter" />
        </service>
        <!-- ContentProvider to store feed data.

        The "authorities" here are defined as part of a ContentProvider interface. It's used here
        as an attachment point for the SyncAdapter. See res/xml/syncadapter.xml and
        SyncService.java.

        Since this ContentProvider is not exported, it will not be accessible outside of this app's
        package. -->
        <provider android:authorities="com.android.home.syncadapter"
                  android:exported="false"
                  android:name=".syncadapter.provider.FeedProvider" />

        <!-- This implements the account we'll use as an attachment point for our SyncAdapter. Since
        our SyncAdapter doesn't need to authenticate the current user (it just fetches a public RSS
        feed), this account's implementation is largely empty.

        It's also possible to attach a SyncAdapter to an existing account provided by another
        package. In that case, this element could be omitted here. -->
        <service android:name=".syncadapter.GenericAccountService">
            <!-- Required filter used by the system to launch our account service. -->
            <intent-filter>
                <action android:name="android.accounts.AccountAuthenticator" />
            </intent-filter>
            <!-- This points to an XMLf ile which describes our account service. -->
            <meta-data android:name="android.accounts.AccountAuthenticator"
                    android:resource="@xml/authenticator"/>
        </service>


        <activity android:name=".Home"
        android:launchMode="singleTop">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <action android:name="android.intent.action.VIEW" />
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>

        <activity android:name=".components.ArchComponents" />

        <activity android:name=".testing.TestingActivity" />
        <activity android:name=".testing.espresso.EspressoBasic">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.HOME" />
            </intent-filter>
        </activity>
        <activity android:name=".testing.espresso.ShowTextActivity"/>
        <activity android:name=".testing.espresso.CustomMatcher" />
        <activity android:name=".testing.espresso.LongListActivity" />
        <activity android:name=".testing.espresso.IdlingResourceActivity" />
        <activity android:name=".testing.espresso.IntentsBasicActivity" />
        <activity android:name=".testing.espresso.ContactsActivity" />
        <activity android:name=".testing.espresso.IntentsAdvancedActivity" />
        <activity android:name=".testing.espresso.RecyclerViewActivity" />
        <activity android:name=".testing.espresso.WebViewActivity" />
        <activity android:name=".testing.junitrunner.CalculatorActivity" />


        <activity
                android:name=".todomvp.TodoMvpActivity"
                android:label="@string/todomvp"/>
        <activity
                android:name=".todomvp.statistics.StatisticsActivity"
                android:parentActivityName=".todomvp.TodoMvpActivity"/>
        <activity android:name=".todomvp.addedittask.AddEditTaskActivity"/>
        <activity android:name=".todomvp.taskdetail.TaskDetailActivity"/>
        <activity
                android:name=".picasso.PicassoActivity"
                android:label="@string/picasso"/>
        <activity android:name=".picasso.PicassoGridViewActivity" />
        <activity android:name=".picasso.PicassoGalleryActivity" />
        <activity android:name=".picasso.PicassoContactsActivity" />
        <activity android:name=".picasso.PicassoListDetailActivity" />

        <activity android:name=".camerabasic.CameraBasic"/>


        <activity android:name=".plaid.PlaidApp" />

        <activity android:name=".randommusic.RandomMusicPlayer"/>

        <service android:name=".randommusic.MusicService">
            <intent-filter>
                <action android:name="com.android.home.randommusic.action.TOGGLE_PLAYBACK"/>
                <action android:name="com.android.home.randommusic.action.PLAY"/>
                <action android:name="com.android.home.randommusic.action.PAUSE"/>
                <action android:name="com.android.home.randommusic.action.STOP"/>
                <action android:name="com.android.home.randommusic.action.SKIP"/>
                <action android:name="com.android.home.randommusic.action.REWIND"/>

                <category android:name="android.intent.category.DEFAULT"/>
            </intent-filter>
            <intent-filter>
                <action android:name="com.android.home.randommusic.action.URL"/>

                <data android:scheme="http"/>
            </intent-filter>
        </service>

        <activity android:name=".soundrecorder.SoundRecorder"/>
        <activity android:name=".circleimage.CircleImageActivity"/>
        <activity android:name=".shimmer.ShimmerActivity"/>
        <activity android:name=".rxjavasamples.RxJavaSamples"/>
        <activity android:name=".mpchart.MpChart"/>

        <activity android:name=".universalmusic.ui.MusicPlayerActivity"
                  android:label="Universal Music Player"/>
        <activity android:name=".universalmusic.ui.PlaceholderActivity" />
        <service android:name=".universalmusic.MusicService">
            <intent-filter>
                <action android:name="android.media.browse.MediaBrowserService" />
            </intent-filter>
        </service>
        <activity android:name=".universalmusic.ui.NowPlayingActivity" />
        <activity android:name=".universalmusic.ui.FullScreenPlayerActivity" />

        <activity android:name=".customview.CustomViewActivity" />
        
        <activity android:name=".rssimage.DisplayActivity" />
        <provider android:authorities="com.android.home.rssimage" android:name=".rssimage.DataProvider"
        android:exported="true"/>
        <service android:name=".rssimage.RSSPullService" />

        <activity android:name=".stepsensor.BatchStepSensor" />

        <activity android:name=".displaybitmaps.ui.DisplayBitmaps" />
        <activity android:name=".displaybitmaps.ui.ImageDetailActivity" />

    </application>

</manifest>